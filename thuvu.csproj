<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <PublishAot>false</PublishAot>
    <InvariantGlobalization>true</InvariantGlobalization>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <DockerfileContext>.</DockerfileContext>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.22.1" />
    <PackageReference Include="Terminal.Gui" Version="1.19.0" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="images\" />
  </ItemGroup>
	<PropertyGroup>
		<DQ>"</DQ>
		<!-- literal double-quote -->
	</PropertyGroup>

	<!-- Compute tag & sha BEFORE the SDK writes assembly attributes -->
	<Target Name="ComputeGitVersion" BeforeTargets="GenerateAssemblyInfo">
		<!-- Last tag reachable from HEAD (i.e., what you created via `git tag <version>`) -->
		<Exec Command="git describe --tags --abbrev=0" ConsoleToMSBuild="true" IgnoreExitCode="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="LastTagRaw" />
		</Exec>

		<!-- Abbreviated SHA -->
		<Exec Command="git rev-parse --short HEAD" ConsoleToMSBuild="true" IgnoreExitCode="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="GitShaShortRaw" />
		</Exec>

		<PropertyGroup>
			<!-- Trim outputs -->
			<LastTag>$([System.String]::Copy('$(LastTagRaw)').Trim())</LastTag>
			<GitShaShort>$([System.String]::Copy('$(GitShaShortRaw)').Trim())</GitShaShort>

			<!-- Fallbacks if not in a Git repo -->
			<LastTagSafe Condition="'$(LastTag)' == ''">0.0.0</LastTagSafe>
			<LastTagSafe Condition="'$(LastTag)' != ''">$(LastTag)</LastTagSafe>
			<GitShaShort Condition="'$(GitShaShort)' == ''">0000000</GitShaShort>

			<!-- Strip leading 'v' (common tag style like v1.2.3) -->
			<LastTagTrimmed>$([System.Text.RegularExpressions.Regex]::Replace('$(LastTagSafe)', '^[vV]', ''))</LastTagTrimmed>

			<!-- Extract numeric SemVer core for VersionPrefix (1, 1.2, 1.2.3, or 1.2.3.4) -->
			<NumericVersion>$([System.Text.RegularExpressions.Regex]::Match('$(LastTagTrimmed)', '^\d+(\.\d+){0,3}').Value)</NumericVersion>

			<!-- Stamp informational version (free-form; great for display) -->
			<InformationalVersion>$(LastTagSafe)+sha.$(GitShaShort)</InformationalVersion>

			<!-- OPTIONAL: if the tag is numeric, set VersionPrefix so assembly/package versions follow the tag -->
			<VersionPrefix Condition="'$(NumericVersion)' != ''">$(NumericVersion)</VersionPrefix>

			<!-- OPTIONAL: derive a 4-part FileVersion from VersionPrefix (fills with .0s) -->
			<FileVersion Condition="'$(NumericVersion)' != ''">
				$([System.Text.RegularExpressions.Regex]::Match('$(NumericVersion).0.0.0', '^\d+(?:\.\d+){0,3}').Value)
			</FileVersion>
		</PropertyGroup>
	</Target>

	<!-- Generate a tiny helper class (constants) -->
	<Target Name="GenerateGitInfo" BeforeTargets="CoreCompile" DependsOnTargets="ComputeGitVersion">
		<ItemGroup>
			<_GitInfoLines Include="// &lt;auto-generated/&gt;" />

			<!-- Put inside your root namespace (no semicolons in items; use block namespace) -->
			<_GitInfoLines Include="namespace $(RootNamespace) {" Condition="'$(RootNamespace)' != ''" />

			<_GitInfoLines Include="internal static class ThisBuild {" />
			<!-- MSBuild item text uses ';' as a separator; escape it as %3B -->
			<_GitInfoLines Include="    public const string VersionTag = $(DQ)$(LastTagSafe)$(DQ)%3B" />
			<_GitInfoLines Include="    public const string GitSha = $(DQ)$(GitShaShort)$(DQ)%3B" />
			<_GitInfoLines Include="}" />

			<_GitInfoLines Include="}" Condition="'$(RootNamespace)' != ''" />
		</ItemGroup>

		<WriteLinesToFile File="$(IntermediateOutputPath)BuildInfo.g.cs" Lines="@(_GitInfoLines)" Overwrite="true" Encoding="UTF-8" />
		<ItemGroup>
			<Compile Include="$(IntermediateOutputPath)BuildInfo.g.cs" />
		</ItemGroup>
	</Target>

</Project>
